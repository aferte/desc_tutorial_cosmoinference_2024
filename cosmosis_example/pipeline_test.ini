###### SAMPLER CHOICE AND DEFINE SOME SETTINGS ######
[runtime]
# Where cosmosis-standard-library is located.
root = ${CSL_DIR}
# Which sampler to use.
# The test 'sampler' will run the pipeline at just one of parameters.
sampler = test

# Set up default
[DEFAULT]
# 2PT_FILE can be referenced in the ini file.
# In this ini file, we just need it to read the n(z).
2PT_FILE = lssty10_srd_32pt_simulation.fits

# Here we define the details of the sampler.
[test]
# We only need to say where to save the outputs here.
save_dir = output_cosmosis_example

###### PIPELINE ######
# We define the cosmosis pipeline here.
[pipeline]
# This is the most important part of the file: we define the list of modules
# we want to use.
modules = consistency camb fast_pt fits_nz photoz_bias ia_nla
          pk_to_cl add_ia_nla
# We point here to the parameter values.
values = values_test.ini
# We want sigma8 and S8 as extra output.
extra_output = cosmological_parameters/sigma_8 cosmological_parameters/s_8

###### MODULES LIST ######
# A module we often need to get some combinations of the parameters we defined.
[consistency]
# We point here to the cosmosis interface for this module.
file = utility/consistency/consistency_interface.py

# Boltzmann code to compute matter and CMB power spectra, distances, growth, ...
# We use camb here, but we could use class, mgcamb, isitgr, etc.
# This is the most computationally expensive step.
[camb]
# We point here to the cosmosis interface for this module.
file = boltzmann/camb/camb_interface.py
# We just want to matter power spectrum for now.
mode = power
# We want to apply a non-linear correction to the matter power spectrum,
NonLinear = pk
# and we want to use HMCode 2020 to model these non-linearities.
halofit_version = mead2020_feedback
# Some precision settings for camb.
kmin=1e-5
kmax=100.0
nk=400
kmax_extrapolate = 200.0

[fast_pt]
file = structure/fast_pt/fast_pt_interface.py
do_ia = T
k_res_fac = 0.5
verbose = F

# Read n(z) distribution
[sacc_nz]
file = number_density/load_nz_sacc/load_nz_sacc.py
nz_file = %(2PT_FILE)s
data_sets = src
prefix_extension = T

[fits_nz]
file = number_density/load_nz_fits/load_nz_fits.py
nz_file = %(2PT_FILE)s
data_sets = source
prefix_section = T
prefix_extension = T

[photoz_bias]
file = number_density/photoz_bias/photoz_bias.py
mode = additive
sample = nz_source
bias_section = wl_photoz_errors
interpolation = linear

[ia_nla]
file = intrinsic_alignments/tatt/tatt_interface.py
sub_lowk = F
do_galaxy_intrinsic = F
ia_model = nla

# This is the other computationally expensive step.
[pk_to_cl]
file = structure/projection/project_2d.py
ell_min_logspaced = 0.1
ell_max_logspaced = 5.0e5
n_ell_logspaced = 100
shear-shear = source-source
intrinsic-intrinsic = source-source
shear-intrinsic = source-source
verbose = F
get_kernel_peaks=F

[add_ia_nla]
file=shear/add_intrinsic/add_intrinsic.py
shear-shear=T
position-shear=F
perbin=F